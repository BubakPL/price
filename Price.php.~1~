<?php
namespace Libs\Price;

class Price
{
    /**
     * There exists currencies with different precision
     * but there are extremely uncommon
     *
     * Full list:
     * https://pl.wikipedia.org/wiki/Jen
     * https://pl.wikipedia.org/wiki/Funt_cypryjski
     * https://pl.wikipedia.org/wiki/Dinar_iracki
     * https://pl.wikipedia.org/wiki/Dinar_jordaÅ„ski
     * https://pl.wikipedia.org/wiki/Dinar_kuwejcki
     * https://pl.wikipedia.org/wiki/Dinar_Bahrajnu
     */
    const PRECISION = 2;

    /**
     * @var float
     */
	private $nett;

    /**
     * @var float
     */
	private $gross;

    /**
     * @var null|string ISO 4217 (3 uppercase chars)
     */
	private $currencySymbol;

	public function __construct($nett = 0, $gross = 0, $currency = null)
	{
        if ($nett > $gross)
        {
            throw new \LogicException('Nett must not be greater than gross');
        }

        if (is_null($currency) === false)
        {
            //ISO 4217 (3 uppercase chars)
            if (preg_match('#^[A-Z]{3}$#', $currency))
            {
                $this->currencySymbol = strtoupper($currency);
            }
            else
            {
                $message = sprintf('Invalid currency symbol: "%s"', $currency);
                throw new \LogicException($message);
            }
        }

		$this->nett = $nett;
		$this->gross = $gross;
	}

	public function getGross()
	{
		return round($this->gross, Price::PRECISION);
	}

	public function getNett()
	{
		return round($this->nett, Price::PRECISION);
	}

	public function getTax()
	{
        if ($this->nett > 0)
        {
            return round($this->gross / $this->nett * 100 - 100, 0);
        }

        return 0;
	}

    public function getCurrencySymbol()
    {
        if (is_null($this->currencySymbol))
        {
            throw new \RuntimeException('Currency symbol is not set');
        }

        return $this->currencySymbol;
    }

    public function hasCurrency()
    {
        return isset($this->currencySymbol);
    }

    public function isGreaterThan(Price $price)
    {
        return $this->getGross() > $price->getGross();
    }

    public function isLowerThan(Price $price)
    {
        return $this->getGross() < $price->getGross();
    }

    public function isEqual(Price $price)
    {
        return (
            $this->getGross() === $price->getGross()
            &&
            $this->getNett() === $price->getNett()
        );
    }

	public function add(Price $priceToAdd)
	{
		$this->checkCurrencies($this, $priceToAdd);

		$newGross = $this->getGross() + $priceToAdd->getGross();
		$newNett = $this->getNett() + $priceToAdd->getNett();

		return new Price($newNett, $newGross, $this->currencySymbol);
	}

    public function subtract(Price $priceToSubtract)
    {
        $this->checkCurrencies($this, $priceToSubtract);

        if ($this->isGreaterThan($priceToSubtract))
        {
            $newGross = $this->getGross() - $priceToSubtract->getGross();
            $newNett = $this->getNett() - $priceToSubtract->getNett();

            return new Price($newNett, $newGross, $this->currencySymbol);
        }

        return new Price(); //zero
    }

    public function multiply($times)
    {
        $nett = $this->getNett() * $times;
        $gross = $this->getGross() * $times;

        return new Price($nett, $gross, $this->currencySymbol);
    }

    public function subtractGross($gross)
    {
        if ($gross > $this->getGross())
        {
            return new Price();
        }

        $newGross = $this->getGross() - (float) $gross;
        $newNett = $newGross / (1 + $this->getTax() / 100);

        return new Price($newNett, $newGross, $this->currencySymbol);
    }

    private function checkCurrencies(Price $A, Price $B)
    {
        if ($A->hasCurrency() === false && $B->hasCurrency() === false)
        {
            return;
        }

        //fixme: one of currencies may still not been set here
        //we get exception anyway, should we translate the exception here?

        if ($A->getCurrencySymbol() !== $B->getCurrencySymbol())
        {
            $message = sprintf(
                'Can not do operate on different currencies ("%s" and "%s")',
                $A->getCurrencySymbol(),
                $B->getCurrencySymbol()
            );
            throw new \LogicException($message);
        }

    }
}